using System;
using System.Collections.Generic;
using Google.Apis.AnalyticsReporting.v4.Data;
using Report = GoogleAnalyticsReportingAPIWrapper.Report;

namespace WrapperConsole
{
    internal class Program
    {
        private static void Main(string[] args)
        {
            List<ReportRow> result = new List<ReportRow>();
            string nextPageToken = null;

            do
            {
                List<DimensionFilterClause> dimensionFilterClauses = new List<DimensionFilterClause>()
                {
                    new DimensionFilterClause()
                    {
                        Filters = new List<DimensionFilter>()
                        {
                            new DimensionFilter()
                            {
                                DimensionName = "ga:eventCategory", Expressions = new List<string>() { "[CategoryName1]", "[CategoryName2]" }, Operator__ = "IN_LIST"
                            }
                        }
                    },
                     new DimensionFilterClause()
                    {
                        Filters = new List<DimensionFilter>()
                        {
                            new DimensionFilter()
                            {
                                DimensionName = "ga:eventLabel", Expressions = new List<string>() { "[LabelName1]", "[LabelName2]" }, Operator__ = "IN_LIST"
                            }
                        }
                    }
                };

                var response = new Report().Get(DateTime.UtcNow.AddDays(-1).ToString("yyyy-MM-dd"),
                    DateTime.UtcNow.ToString("yyyy-MM-dd"), new[] { "ga:eventValue" },
                    new[] { "ga:eventCategory, ga:eventAction, ga:eventLabel" }, "[yourViewId]",
                    "[json file generated by Google API console]",
                    new[] { "https://www.googleapis.com/auth/analytics.readonly" }, "Wrapper app", nextPageToken, dimensionFilterClauses);

                if (response != null && response.Reports.Count > 0 && response.Reports[0].Data.Rows != null)
                {
                    nextPageToken = response.Reports[0].NextPageToken;

                    result.AddRange(response.Reports[0].Data.Rows);
                }
                else
                    nextPageToken = null;
            } while (nextPageToken != null);

        }
    }
}
